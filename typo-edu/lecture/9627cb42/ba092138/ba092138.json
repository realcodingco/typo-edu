{
    "title": "제너레이터 함수",
    "id": "ba092138",
    "time": 1673238113896,
    "pages": [{"faa21b7c":{"title":"제너레이터 함수란","id":"faa21b7c","time":1678370275079,"content":[{"comp":"title","order":"1","enter":"2","text":"제너레이터 함수란","style":[]},{"comp":"text","order":"2","enter":"2","text":"제너레이터는 ES6에 도입된 문법으로, 이터러블을 생성하는 함수 입니다.","style":[]},{"comp":"text","order":"3","enter":"0","text":"일반적으로 함수는 반환값이 없거나 하나의 값만 반환합니다.","style":[]},{"comp":"check","order":"4","enter":"2","id":"df1a7798","text":"제너레이터 함수는 2개 이상의 값을 필요에 따라 하나씩 반환할 수 있습니다.","style":[]},{"comp":"check","order":"5","enter":"2","id":"2faf0430","text":"제너레이터 함수의 선언은 function* 키워드를 사용합니다.","style":[{"target":"function*","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"check","order":"6","enter":"0","id":"f6a9aa90","text":"그리고 하나 이상의 yield문이 포함되어야 합니다.","style":[]},{"comp":"text","order":"7","enter":"2","text":"yield 키워드는 제너레이터 함수를 중지하거나 재개하는데 사용합니다.","style":[{"target":"yield","type":"background:#70CAFF;color:white;padding:2px;"}]},{"comp":"text","order":"8","enter":"2","text":"제너레이터 함수의 동작은 일반 함수와는 차이가 있습니다.","style":[]},{"comp":"image","order":"9","enter":"3","width":"400","src":"./lecture/9627cb42/ba092138/1_1.png","style":[]},{"comp":"text","order":"10","enter":"2","text":"일반함수는 코드블록을 한번에 실행하지만, 제너레이터 함수는 코드 블록의 실행을 중지했다가 다시 실행하는 동작을 보입니다.","style":[]},{"comp":"direction","order":"11","enter":"0","codeId":"169d058b","targetLine":"1","title":"제너레이터 함수의 선언","text":"다음의 코드를 따라서 입력해 보세요.","bgCode":"","style":[]},{"comp":"aceEditor","order":"12","enter":"12","height":"105","start":"","text":"function* alphabet() {\n\n}","style":[]},{"comp":"text","order":"13","enter":"2","text":"제너레이터 함수가 선언되었습니다. 그런데, 3라인에 다음과 같이 오류 표시가 되었습니다.","style":[]},{"comp":"par","order":"14","enter":"3","style":"margin:0 auto;width:570px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color:red;","text":"A generator function shall contain a yield statement."},{"comp":"text","order":"15","enter":"0","text":"코드 블록 안에 yield 문이 포함되지 않았기 때문입니다. ","style":[]},{"comp":"check","order":"16","enter":"6","id":"a5d0879d","text":"제너레이터 함수에는 반드시 하나 이상의 yield 문이 포함되어야 합니다. ","style":[]}]}},{"1fcead3c":{"title":"yield문과 제너레이터 함수 호출","id":"1fcead3c","time":1678414154380,"content":[{"comp":"title","order":"1","enter":"2","text":"yield문과 제너레이터 함수 호출","style":[]},{"comp":"text","order":"2","enter":"2","text":"제너레이터 함수 코드 블록에 yield문을 추가하고 함수를 호출해 보겠습니다.","style":[]},{"comp":"direction","order":"3","enter":"0","codeId":"58087cdf","targetLine":"2","title":"yield문과 제너레이터 호출","text":"다음과 같이 yield 문과 제너레이터 함수를 호출하는 코드를 추가하고 실행해 보세요.","bgCode":"function* alphabet() {\n    \n}","style":[]},{"comp":"aceEditor","order":"4","enter":"12","height":"200","start":"","text":"function* alphabet() {\n    print(1);\n    yield 'a';\n    print(2);\n    yield 'b';\n    print(3);\n    yield 'c';\n}\nconst generator = alphabet();","style":[]},{"comp":"text","order":"5","enter":"0","text":"(9라인) alphabet 제너레이터 함수를 호출해 generator 변수에 대입합니다.","style":[{"target":"(9라인)","type":"font-size:small;"}]},{"comp":"check","order":"6","enter":"2","id":"1a35befc","text":"제너레이터 함수를 호출하면 Symbol.iterator 메서드를 가진 이터러블인 제너레이터가 반환됩니다.","style":[]},{"comp":"text","order":"7","enter":"2","text":"(10라인) in 연산자를 사용해 generator에 Symbol.iterator 메서드가 존재하는지 확인해 출력합니다.","style":[{"target":"(10라인)","type":"font-size:small;"}]},{"comp":"text","order":"8","enter":"2","text":"따라서, 코드를 실행하면 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"9","enter":"3","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> true"},{"comp":"text","order":"10","enter":"2","text":"하지만, alphabet 제너레이터 함수의 코드블록은 실행되지 않았습니다.","style":[]},{"comp":"check","order":"11","enter":"2","id":"fa2e0ffc","text":"제너레이터 함수의 yield문은 next 메서드를 사용해 순차적으로 실행할 수 있습니다.","style":[]},{"comp":"direction","order":"12","enter":"0","codeId":"691be2c2","targetLine":"10","title":"next 메서드 사용","text":"다음의 코드를 추가하고 실행해 보세요.","bgCode":"function* alphabet() {\n    print(1);\n    yield 'a';\n    print(2);\n    yield 'b';\n    print(3);\n    yield 'c';\n}\nconst generator = alphabet();\n","style":[]},{"comp":"aceEditor","order":"13","enter":"12","height":"50","start":"10","text":"print(generator.next());","style":[]},{"comp":"check","order":"14","enter":"2","id":"05809a6b","text":"next 메서드는 제너레이터 함수에서 하나의 yield 문을 만날때까지 코드블록을 실행합니다.","style":[]},{"comp":"text","order":"15","enter":"2","text":"따라서, alpahbet의 첫번째 yield문인 3라인의 코드까지 실행되어 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"16","enter":"3","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> 1 <font size=2 color=gray>// print(1) 실행</font>\n>> {\"value\":\"a\",\"done\":false} <font size=2 color=gray>// yield 'a' 실행</font>"},{"comp":"check","order":"17","enter":"","id":"3f9308c9","text":"next 메서드는 value와 done의 프로퍼티를 가진 객체를 반환합니다.","style":[]},{"comp":"text","order":"18","enter":"2","text":"value는 yield의 산출값이며, done은 함수 코드실행 완료 여부를 나타냅니다. ","style":[]},{"comp":"text","order":"19","enter":"2","text":"next 메서드를 다시 사용하면 실행된 yield문 다음부터 다시 실행됩니다.","style":[]},{"comp":"direction","order":"20","enter":"0","codeId":"76506646","targetLine":"11","title":"next 메서드 사용","text":"다음의 코드를 추가하고 실행해 보세요.","bgCode":"function* alphabet() {\n    print(1);\n    yield 'a';\n    print(2);\n    yield 'b';\n    print(3);\n    yield 'c';\n}\nconst generator = alphabet();\nprint(generator.next());\n","style":[]},{"comp":"aceEditor","order":"21","enter":"12","height":"105","start":"11","text":"print(generator.next());\nprint(generator.next());\nprint(generator.next());","style":[]},{"comp":"text","order":"22","enter":"2","text":"코드를 실행하면 순차적으로 yield문이 실행되어 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"23","enter":"6","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> 1\n>> {\"value\":\"a\",\"done\":false}\n>> 2\n>> {\"value\":\"b\",\"done\":false}\n>> 3\n>> {\"value\":\"c\",\"done\":false}\n>> {\"done\":true}"}]}},{"f9002cac":{"title":"제너레이터 함수의 데이터 전달","id":"f9002cac","time":1678417193803,"content":[{"comp":"title","order":"1","enter":"2","text":"제너레이터 함수의 데이터 전달","style":[]},{"comp":"text","order":"2","enter":"2","text":"next 메서드에 인수를 사용해 제너레이터 함수의 내외부에서 데이터 전달을 할 수 있습니다.","style":[]},{"comp":"direction","order":"3","enter":"0","codeId":"4a404218","targetLine":"2","title":"next 메서드 인수 사용","text":"다음의 코드를 따라서 입력해 보세요.","bgCode":"function* quiz() {\n    \n}","style":[]},{"comp":"aceEditor","order":"4","enter":"12","height":"180","start":"","text":"function* quiz() {\n    let question = 'who are you?';\n    alert(question);\n    let answer = yield question;\n    alert(answer);\n}","style":[]},{"comp":"text","order":"5","enter":"0","text":"(1라인) quiz 제너레이터 함수가 선언되었습니다.","style":[{"target":"(1라인)","type":"font-size:small;"}]},{"comp":"text","order":"6","enter":"0","text":"(2~3라인) question 변수에 'who are you?'를 대입하고, question의 메시지로 alert 창을 띄웁니다.","style":[{"target":"(2~3라인)","type":"font-size:small;"}]},{"comp":"text","order":"7","enter":"0","text":"(4라인) 그리고 yield문에 question을 사용해 answer 변수에 대입합니다. ","style":[{"target":"(4라인)","type":"font-size:small;"}]},{"comp":"text","order":"8","enter":"4","text":"(5라인) 마지막으로 answer를 alert으로 띄웁니다.","style":[{"target":"(5라인)","type":"font-size:small;"}]},{"comp":"text","order":"9","enter":"0","text":"이제 quiz 제너레이터 함수를 호출하고 next 메서드를 사용해 보겠습니다.","style":[]},{"comp":"direction","order":"10","enter":"0","codeId":"415f7ec4","targetLine":"7","title":"next 메서드 인수 사용","text":"다음의 코드를 추가하고 실행해 보세요.","bgCode":"function* quiz() {\n    let question = 'who are you?';\n    alert(question);\n    let answer = yield question;\n    alert(answer);\n}\n","style":[]},{"comp":"aceEditor","order":"11","enter":"12","height":"105","start":"7","text":"const generator = quiz();\ngenerator.next();\ngenerator.next('teacher');","style":[]},{"comp":"text","order":"12","enter":"0","text":"(8라인) 첫번째 next 메서드는 인수 없이 사용합니다.","style":[{"target":"(8라인)","type":"font-size:small;"}]},{"comp":"text","order":"13","enter":"2","text":"(9라인) 2번째 메서드에는 'teacher' 문자열이 인수로 사용되었습니다.","style":[{"target":"(9라인)","type":"font-size:small;"}]},{"comp":"text","order":"14","enter":"2","text":"코드를 실행하면 다음과 같이 alert창이 차례대로 열립니다.","style":[]},{"comp":"par","order":"15","enter":"2","style":"","text":"<div style=\"background:white;box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);font-size:14px;width:400px;border:1px solid rgba(0, 0, 0, 0.3);padding:10px 20px 20px;border-radius:4px;margin:0 auto;\">페이지 내용:\nwho are you?\n<button style='padding:0px 10px;float:right;border:1px solid rgba(0, 0, 0, 0.1);border-radius:4px;margin:4px;'>확인</button>\n</div>"},{"comp":"par","order":"16","enter":"2","style":"","text":"<div style=\"background:white;box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);font-size:14px;width:400px;border:1px solid rgba(0, 0, 0, 0.3);padding:10px 20px 20px;border-radius:4px;margin:0 auto;\">페이지 내용:\nteacher\n<button style='padding:0px 10px;float:right;border:1px solid rgba(0, 0, 0, 0.1);border-radius:4px;margin:4px;'>확인</button>\n</div>"},{"comp":"text","order":"17","enter":"2","text":"이와 같이 next 메서드에 인수를 사용된 값은 제너레이터 함수 안으로 전달됩니다.","style":[]},{"comp":"text","order":"18","enter":"2","text":"따라서, 2번째 next 메서드의 'teacher' 인수 값이 yield question으로 전달돼 answer 변수의 값으로 대입된 것입니다.","style":[]},{"comp":"text","order":"19","enter":"6","text":"이와 같이 사용하면 yield문의 실행 결과 값이 제너레이터 안으로 전달할 수 있습니다.","style":[]}]}},{"5bbe340e":{"title":"return과 throw 메서드","id":"5bbe340e","time":1678422890259,"content":[{"comp":"title","order":"1","enter":"2","text":"return과 throw 메서드","style":[]},{"comp":"text","order":"2","enter":"2","text":"제너레이터 객체 메서드 return과 throw에 대해서 알아보겠습니다.","style":[]},{"comp":"text","order":"3","enter":"2","text":"(1) return 메서드","style":[{"target":"(1) return 메서드","type":"font-size:x-large;"}]},{"comp":"check","order":"4","enter":"2","id":"1de509f7","text":"return 메서드를 사용하면 데이터 객체의 done 속성값이 true가 됩니다.","style":[]},{"comp":"text","order":"5","enter":"0","text":"다음과 같은 코드로 살펴보면, ","style":[]},{"comp":"aceEditor","order":"6","enter":"2","height":"260","start":"","text":"function* counting() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nconst generator = counting();\nprint(generator.next()); // {\"value\":1,\"done\":false}\n\nprint(generator.next()); // {\"value\":2,\"done\":false}","style":[]},{"comp":"check","order":"7","enter":"2","id":"29fed075","text":"(1~5라인) 3개 yield 문이 포함된 counting 제너레이터 함수의 선언입니다. ","style":[{"target":"(1~5라인)","type":"font-size:small;"}]},{"comp":"text","order":"8","enter":"2","text":"(7, 9라인) 2번의 next 메서드로 yield문이 순차적으로 실행돼 다음과 같이 출력됩니다.","style":[{"target":"(7, 9라인)","type":"font-size:small;"}]},{"comp":"par","order":"9","enter":"3","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> {\"value\":1,\"done\":false}\n>> {\"value\":2,\"done\":false}"},{"comp":"text","order":"10","enter":"0","text":"8라인에 return 메서드를 사용해 보겠습니다.","style":[]},{"comp":"direction","order":"11","enter":"0","codeId":"ca0f99c4","targetLine":"8","title":"return 메서드","text":"다음의 코드를 따라서 입력하고, 실행해 보세요.","bgCode":"function* counting() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nconst generator = counting();\nprint(generator.next());\n\nprint(generator.next());","style":[]},{"comp":"aceEditor","order":"12","enter":"12","height":"50","start":"8","text":"print(generator.return());","style":[]},{"comp":"text","order":"13","enter":"2","text":"코드를 실행하면, done 속성이 true로 처리되는 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"14","enter":"3","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> {\"value\":1,\"done\":false}\n>> {\"done\":true}\n>> {\"done\":true}"},{"comp":"check","order":"15","enter":"2","id":"59379bb5","text":"그리고 return 메서드에 인수를 사용하면, 전달된 값이 value 속성값이 됩니다.","style":[]},{"comp":"direction","order":"16","enter":"0","codeId":"bad512a9","targetLine":"8","title":"return 메서드","text":"다음과 같이 return 메서드에 인수를 추가하고, 실행해 보세요.","bgCode":"function* counting() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nconst generator = counting();\nprint(generator.next());\nprint(generator.return());\nprint(generator.next());","style":[]},{"comp":"aceEditor","order":"17","enter":"12","height":"50","start":"8","text":"print(generator.return('stop'));","style":[]},{"comp":"text","order":"18","enter":"2","text":"코드를 실행하면, 다음과 같이 value 값이 추가된 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"19","enter":"5","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> {\"value\":1,\"done\":false}\n>> {<font color=red>\"value\":\"stop\"</font>,\"done\":true}\n>> {\"done\":true}"},{"comp":"text","order":"20","enter":"2","text":"(2) throw 메서드","style":[{"target":"(2) throw 메서드","type":"font-size:x-large;"}]},{"comp":"check","order":"21","enter":"2","id":"0ba6bd6f","text":"제너레이터 함수 안에 try... catch문으로 예외처리가 되었을 때, throw 메서드를 사용하면 catch문이 실행됩니다.","style":[]},{"comp":"direction","order":"22","enter":"0","codeId":"ed7b4058","targetLine":"12","title":"throw 메서드","text":"다음의 코드를 추가하고, 실행해 보세요.","bgCode":"function* counting() {\n    try {\n        yield 1;\n        yield 2;\n        yield 3;\n    } catch(e) {\n        print('catch', e);\n    }\n}\nconst generator = counting();\nprint(generator.next());\n","style":[]},{"comp":"aceEditor","order":"23","enter":"12","height":"50","start":"12","text":"print(generator.throw('error'));","style":[]},{"comp":"text","order":"24","enter":"2","text":"코드를 실행하면, throw 메서드로 catch문이 실행되어 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"25","enter":"6","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> {\"value\":1,\"done\":false}\n>> catch error <font size=2 color=gray>// catch문 실행</font>\n>> {\"done\":true}"}]}},{"7401f3db":{"title":"제너레이터 컴포지션","id":"7401f3db","time":1678424842623,"content":[{"comp":"title","order":"1","enter":"2","text":"제너레이터 컴포지션","style":[]},{"comp":"check","order":"2","enter":"2","id":"a497ed9c","text":"제너레이터 컴포지션(generator composition)은 제너레이터 함수 안에서 다른 제너레이터가 임베딩 된 기능을 말합니다.","style":[]},{"comp":"check","order":"3","enter":"2","id":"951d64d6","text":"이를 위해  yield* 키워드를 사용합니다.","style":[{"target":"yield*","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"direction","order":"4","enter":"0","codeId":"8f93595c","targetLine":"5","title":"제너레이터 컴포지션","text":"다음의 코드를 따라서 입력하고 실행해 보세요.","bgCode":"function* g1() {\n    yield 'hello';\n}\nfunction* g2() {\n    \n}\n\nconst generator = g2();\nprint(generator.next());","style":[]},{"comp":"aceEditor","order":"5","enter":"12","height":"50","start":"5","text":"    yield* g1();","style":[]},{"comp":"text","order":"6","enter":"0","text":"'hello'의 yield문이 포함된 g1 제너레이터 함수가 선언되었습니다.","style":[]},{"comp":"aceEditor","order":"7","enter":"2","height":"105","start":"","text":"function* g1() {\n    yield 'hello';\n}","style":[]},{"comp":"text","order":"8","enter":"0","text":"그리고 g1 제너레이터 함수를 위임하는 yield* 문이 포함된 g2 제너레이터 함수가 선언되었습니다.","style":[]},{"comp":"aceEditor","order":"9","enter":"2","height":"105","start":"4","text":"function* g2() {\n    yield* g1();\n}","style":[]},{"comp":"text","order":"10","enter":"0","text":"g2 제너레이터 함수를 호출해 generator 변수에 대입하고, next 메서드를 사용했습니다.","style":[]},{"comp":"aceEditor","order":"11","enter":"3","height":"80","start":"8","text":"const generator = g2();\nprint(generator.next());","style":[]},{"comp":"text","order":"12","enter":"2","text":"코드를 실행하면 g1 제너레이터 함수로 위임되어 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"13","enter":"5","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> {\"value\":\"hello\",\"done\":false}"},{"comp":"check","order":"14","enter":"2","id":"5cfc9d39","text":"yield* 은 제너레이터 함수 뿐 아니라 반복 가능한 이터러블 객체에도 사용할 수 있습니다.","style":[]},{"comp":"direction","order":"15","enter":"0","codeId":"b003c0b4","targetLine":"2","title":"yield* 사용","text":"다음의 코드를 따라서 입력하고 실행해 보세요","bgCode":"function* g3() {\n    \n    \n}\n\nconst generator = g3();\nfor(let i of generator) {\n    print(i);\n}","style":[]},{"comp":"aceEditor","order":"16","enter":"12","height":"80","start":"2","text":"    yield* [3, 4];\n    yield* \"hello\";","style":[]},{"comp":"text","order":"17","enter":"2","text":"g3 제너레이터 함수에는 2개 yield*가 포함되었고, 배열과 문자열의 반복 가능한 이터러블 객체가 사용되었습니다.","style":[]},{"comp":"text","order":"18","enter":"0","text":"제너레이터는 이터러블이므로, for... of 반복문을 사용할 수 있습니다.","style":[]},{"comp":"aceEditor","order":"19","enter":"2","height":"130","start":"6","text":"const generator = g3();\nfor(let i of generator) {\n    print(i);\n}","style":[]},{"comp":"text","order":"20","enter":"2","text":"코드를 실행하면 사용된 이터러블의 모든 요소가 다음과 같이 출력되는 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"21","enter":"6","style":"margin:0 auto;width:500px;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> 3\n>> 4\n>> h\n>> e\n>> l\n>> l\n>> o"},{"comp":"check","order":"22","enter":"2","id":"887080d6","text":"교재학습이 완료되었습니다.","style":[{"target":"교재학습이 완료되었습니다.","type":"font-size:20px;color:gray;"}]},{"comp":"ending","order":"23","enter":"6","style":[]}]}}],
    "icon": "undraw_online_resume_re_ru7s.svg"
}