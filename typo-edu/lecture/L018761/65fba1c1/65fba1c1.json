{
    "title": "이벤트 4",
    "id": "65fba1c1",
    "time": 1673238096221,
    "pages": [{"dc2f34de":{"title":"이벤트 핸들러","id":"dc2f34de","time":1677808468422,"content":[{"comp":"title","order":"1","enter":"2","text":"이벤트 핸들러","style":[]},{"comp":"text","order":"2","enter":"2","text":"웹 브라우저에서 사용자 조작이나 환경의 변화로 발생되는 모든 것을 이벤트라고 하며, 이러한 이벤트 처리를 담당하는 것을 이벤트 핸들러 라고 합니다.","style":[{"target":"이벤트","type":"box-shadow: inset 0 -6px 0 #00D8C6;"},{"target":"이벤트 핸들러","type":"box-shadow: inset 0 -6px 0 #6BDCFF;"}]},{"comp":"text","order":"3","enter":"2","text":"자바스크립트에서 이벤트 핸들러를 등록하는 3가지 방법에 대해 알아보겠습니다.","style":[]},{"comp":"text","order":"4","enter":"2","text":"(1) HTML 요소의 속성 사용","style":[]},{"comp":"par","order":"5","enter":"2","style":"","text":"<div style=\"border-radius:8px;display:flex;justify-content: center; margin:0 auto;font-size:14px;padding:10px;background:lightgray;\"><xmp style=\"display:inline-block;\"><input id=\"example\" type=\"button\" </xmp><xmp style=\"display:inline-block;color:red;\">onclick=\"alert('clicked '+this.value);\" </xmp><xmp style=\"display:inline-block;\">value=\"SEND\"/></xmp></div>"},{"comp":"check","order":"6","enter":"2","id":"6b416d6a","text":"위와 같이 html 태그의 속성으로 처리해 인라인 방식으로 이벤트 핸들러를 등록할 수 있습니다.","style":[]},{"comp":"text","order":"7","enter":"0","text":"다음 버튼은 위 input 태그 요소의 결과 입니다.<br>클릭해서 이벤트 핸들러 함수의 실행결과를 확인해 보세요.","style":[]},{"comp":"par","order":"8","enter":"2","style":"","text":"<input id=\"example\" type=\"button\" onclick=\"alert('clicked '+this.value);\" value=\"SEND\"/>"},{"comp":"text","order":"9","enter":"4","text":"이와 같은 사용은 태그에 포함되어 있어 이벤트의 소재 파악이 쉽지만, html과 자바스크립트 코드가 혼재된 상태로 추천하는 방식은 아닙니다.","style":[]},{"comp":"text","order":"10","enter":"2","text":"(2) DOM 요소의 프로퍼티 사용","style":[]},{"comp":"text","order":"11","enter":"2","text":"DOM은 html 요소를 자바스크립트 등의 프로그램이 조작할 수 있도록 제공되는 인터페이스 입니다. ","style":[]},{"comp":"check","order":"12","enter":"2","id":"d0ee8bc4","text":"document, window 역시 DOM 객체입니다. 이와 같은 DOM 요소의 프로퍼티를 사용해 이벤트 핸들러를 등록할 수 있습니다.","style":[]},{"comp":"direction","order":"13","enter":"0","codeId":"a5288e64","targetLine":"","title":"","text":"다음의 코드를 실행하고 위의 버튼을 클릭해보세요.","bgCode":"function getTime() {\n    let date = new Date();\n    alert(date.toLocaleString());\n}\nlet button = document.getElementById('example');\nbutton.onclick = getTime;","style":[]},{"comp":"aceEditor","order":"14","enter":"4","height":"180","start":"","text":"function getTime() {\n    let date = new Date();\n    alert(date.toLocaleString());\n}\nlet button = document.getElementById('example');\nbutton.onclick = getTime;","style":[]},{"comp":"par","order":"15","enter":"10","style":"","text":"<input type=\"button\" style=\"font-size:13px;\" onclick=\"document.getElementById('example').scrollIntoView({block: 'center'})\" value=\"버튼 위치로 이동\" />"},{"comp":"check","order":"16","enter":"2","id":"8454c336","text":"위에서 6라인의 코드를 살펴보면 button 변수에 대입된 DOM 요소의 onclick 프로퍼티를 사용해 getTime 핸들러 함수를 대입했습니다.","style":[]},{"comp":"text","order":"17","enter":"4","text":"따라서 위 코드를 실행 후 버튼을 클릭하면, 인라인 방식으로 등록된 핸들러 대신, getTime 핸들러 함수가 실행되어 alert 창으로 현재 시간이 출력되는 것을 확인할 수 있습니다.","style":[]},{"comp":"text","order":"18","enter":"2","text":"(3) addEventListener 메서드 사용","style":[]},{"comp":"check","order":"19","enter":"2","id":"98dd35ae","text":"앞서 이벤트를 다룬 교재에서 사용했듯이, addEventListener 메서드를 사용해 이벤트 핸들러를 등록할 수 있습니다.","style":[]},{"comp":"direction","order":"20","enter":"0","codeId":"cd03f25b","targetLine":"","title":"","text":"다음의 코드를 실행하고 버튼을 클릭해 보세요.","bgCode":"let button = document.getElementById('example');\nbutton.addEventListener('click', e => e.target.value = 'hello');","style":[]},{"comp":"aceEditor","order":"21","enter":"6","height":"90","start":"","text":"let button = document.getElementById('example');\nbutton.addEventListener('click', e => e.target.value = 'hello');","style":[]},{"comp":"par","order":"22","enter":"8","style":"","text":"<input type=\"button\" style=\"font-size:13px;\" onclick=\"document.getElementById('example').scrollIntoView({block: 'center'})\" value=\"버튼 위치로 이동\" />"},{"comp":"text","order":"23","enter":"2","text":"위 2라인에서 addEventListener 메서드를 사용해 클릭이벤트 핸들러 함수에 등록된 내용은 button의 value 값을 'hello'로 변경합니다.","style":[]},{"comp":"text","order":"24","enter":"3","text":"따라서, 코드를 실행하고 버튼을 클릭하면, 버튼 텍스트가 'hello'로 변경되는 것을 확인할 수 있습니다.","style":[]},{"comp":"check","order":"25","enter":"2","id":"c1a8c351","text":"addEventListener의 경우, 하나의 이벤트에 여러 개의 핸들러를 등록할 수 있습니다.","style":[]},{"comp":"check","order":"26","enter":"2","id":"22ce8366","text":"또한, 여러개 요소에 하나의 동일한 이벤트 핸들러를 재사용할 수도 있습니다.","style":[]},{"comp":"text","order":"27","enter":"5","text":"따라서, addEventListener 메서드를 사용하는 것을 가장 권장하고 있습니다.","style":[]}]}},{"df6d3846":{"title":"폼 이벤트 : input","id":"df6d3846","time":1677819194712,"content":[{"comp":"title","order":"1","enter":"2","text":"폼 이벤트 : input","style":[]},{"comp":"check","order":"2","enter":"2","id":"9c52a418","text":"input 은 input, textarea 요소에 값이 입력될때마다 발생합니다.","style":[{"target":"input","type":"font-size:xx-large;color:#00698C;"}]},{"comp":"practiceDirection","order":"3","enter":"0","codeId":"c0da9745","targetApp":"free","title":"input 이벤트","targetLine":"3","bgCode":"let input = document.createElement('input');\napp().append(input);\n","text":"다음의 코드를 따라서 입력하고 실행해서 input 요소에 텍스트를 입력해 보세요.","style":[]},{"comp":"aceEditor","order":"4","enter":"10","height":"50","start":"3","text":"input.oninput = e => print(e.target.value);","style":[]},{"comp":"check","order":"5","enter":"2","id":"ebcbcb85","text":"위 코드는 oninput 이벤트 속성을 사용해 입력될때마다 input 요소의 value 값을 출력하도록 합니다.","style":[]},{"comp":"text","order":"6","enter":"2","text":"따라서, 코드 실행 후 텍스트를 입력해보면 다음과 같이 출력되는 것을 확인할 수 있습니다.","style":[]},{"comp":"image","order":"7","enter":"3","width":"400","src":"./lecture/9627cb42/65fba1c1/2_1.gif","style":[]},{"comp":"text","order":"8","enter":"4","text":"이처럼 입력창에 입력된 내용을 처리할 수 있어 유효성 검사에 활용할 수 있는 이벤트 입니다.","style":[]},{"comp":"text","order":"9","enter":"6","text":"이는 input과 textarea 요소에 적용할 수 있으며, 이와 유사한 change 이벤트가 있습니다. 이 둘은 어떤 차이를 보이는지 다음에서 계속 살펴 보겠습니다.","style":[]}]}},{"408c059e":{"title":"폼 이벤트 : change","id":"408c059e","time":1677821509010,"content":[{"comp":"title","order":"1","enter":"2","text":"폼 이벤트 : change","style":[]},{"comp":"check","order":"2","enter":"2","id":"f27e4ccf","text":"change 는 input, textarea, select 요소의 값이 변경되었을 때 발생합니다.","style":[{"target":"change","type":"font-size:xx-large;color:#A042FF;"}]},{"comp":"practiceDirection","order":"3","enter":"0","codeId":"212c82f6","targetApp":"free","title":"change 이벤트","targetLine":"3","bgCode":"let input = document.createElement('input');\napp().append(input);\n","text":"다음의 코드를 따라서 입력하고 실행 후, input 창에 텍스트를 입력해 보세요.","style":[]},{"comp":"aceEditor","order":"4","enter":"10","height":"50","start":"3","text":"input.onchange = e => print(e.target.value);","style":[]},{"comp":"text","order":"5","enter":"2","text":"input의 onchange 속성으로 앞서 input 이벤트의 핸들러와 동일하게 사용되었습니다.","style":[]},{"comp":"text","order":"6","enter":"2","text":"코드 실행 후, 텍스트를 입력해보면, input 이벤트는 텍스트가 입력될때마다 핸들러가 실행되었다면,<br>\nchange 이벤트는 input 창의 포커스가 해제되었을 때 핸들러가 실행되는 것을 확인할 수 있습니다.","style":[{"target":"포커스가 해제되었을 때 핸들러가 실행","type":"box-shadow: inset 0 -6px 0 #FFB2D4;"}]},{"comp":"image","order":"7","enter":"3","width":"400","src":"./lecture/9627cb42/65fba1c1/3_1.gif","style":[]},{"comp":"text","order":"8","enter":"2","text":"또, input 이벤트와 달리, change 이벤트는 select 요소에도 적용 할 수 있습니다.","style":[]},{"comp":"text","order":"9","enter":"6","text":"두 이벤트의 차이를 이해하고, 상황에 맞는 이벤트를 선택해 핸들러 처리를 해야 합니다.","style":[]}]}},{"b425c0ab":{"title":"폼 이벤트 : submit","id":"b425c0ab","time":1677823113652,"content":[{"comp":"title","order":"1","enter":"2","text":"폼 이벤트 : submit","style":[]},{"comp":"check","order":"2","enter":"2","id":"614e1f1a","text":"submit 은 폼 데이터를 전송할 때 발생합니다.","style":[{"target":"submit","type":"font-size:xx-large;color:#FF817F;"}]},{"comp":"text","order":"3","enter":"2","text":"다음은 3개 체크박스와 제출 버튼을 포함하는 form 요소를 생성해 화면에 붙여주는 예시 코드입니다.","style":[]},{"comp":"aceEditor","order":"4","enter":"3","height":"500","start":"","text":"function makeTerms() {\n    let form = document.createElement('form');\n    form.name = 'termsForm';\n    \n    let termsList = ['이용약관 동의', '개인정보 수집이용 동의', '이벤트, 혜택정보 수신 동의'];\n    let appendTerms = (no, id, text) => {\n        let label = document.createElement('label');\n        label.style.display = 'block';\n        label.style.textAlign = 'left';\n        label.htmlFor = id + no;\n        label.innerText = text;\n        \n        let input = document.createElement('input');\n        input.type = 'checkbox';\n        input.name = id;\n        input.id = id + no;\n        \n        label.appendChild(input);\n        form.appendChild(label);\n    };\n    \n    for(let i of termsList.keys()) {\n        appendTerms(i, 'agree', termsList[i]);\n    }\n    \n    let submit = document.createElement('input');\n    submit.type = 'submit';\n    \n    form.appendChild(submit);\n    app().append(form);\n    \n    return form;\n}\n\nlet form = makeTerms();","style":[]},{"comp":"text","order":"5","enter":"2","text":"makeTerms 함수는 4개 요소를 포함하는 form 요소를 생성하고 반환합니다.","style":[]},{"comp":"image","order":"6","enter":"3","width":"80%","src":"./lecture/9627cb42/65fba1c1/4_1.png","style":[]},{"comp":"practiceDirection","order":"7","enter":"0","codeId":"c770a901","targetApp":"free","title":"submit 이벤트","targetLine":"36","bgCode":"function makeTerms() {\n    let form = document.createElement('form');\n    form.name = 'termsForm';\n    \n    let termsList = ['이용약관 동의', '개인정보 수집이용 동의', '이벤트, 혜택정보 수신 동의'];\n    let appendTerms = (no, id, text) => {\n        let label = document.createElement('label');\n        label.style.display = 'block';\n        label.style.textAlign = 'left';\n        label.htmlFor = id + no;\n        label.innerText = text;\n        \n        let input = document.createElement('input');\n        input.type = 'checkbox';\n        input.name = id;\n        input.id = id + no;\n        \n        label.appendChild(input);\n        form.appendChild(label);\n    };\n    \n    for(let i of termsList.keys()) {\n        appendTerms(i, 'agree', termsList[i]);\n    }\n    \n    let submit = document.createElement('input');\n    submit.type = 'submit';\n    \n    form.appendChild(submit);\n    app().append(form);\n    \n    return form;\n}\n\nlet form = makeTerms();\n","text":"다음의 코드를 추가하고 실행 후, 1개 체크박스만 체크하고 제출 버튼을 클릭해보세요.","style":[]},{"comp":"aceEditor","order":"8","enter":"12","height":"220","start":"36","text":"form.onsubmit = e => {\n    let checks = document.termsForm.agree;\n    for(var i=0; i<checks.length; i++) {\n        if(!checks[i].checked) {\n            alert('모두 체크해주세요.');\n            break;\n        }\n    }\n    return false;\n};","style":[]},{"comp":"check","order":"9","enter":"2","id":"3240e790","text":"위에서 document.termsForm.agree 는 문서에서 termsform 이름의 하위요소 중 이름이 agree인 요소 목록을 가져옵니다. ","style":[{"target":"document.termsForm.agree","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"10","enter":"2","text":"즉, (37라인) checks 변수에는 체크박스 input 요소가 담깁니다. ","style":[{"target":"(37라인)","type":"font-size:small;"}]},{"comp":"check","order":"11","enter":"3","id":"cb3c04f3","text":"그리고 (38~43라인) 반복문으로 각 요소에 checked 속성이 없으면, alert 창에 '모두 체크해주세요.'를 출력하고, 반복문을 중단합니다. ","style":[{"target":"(38~43라인)","type":"font-size:small;"}]},{"comp":"text","order":"12","enter":"3","text":"따라서, 코드 실행 후, 체크박스가 모두 체크되지 않은 상태로 제출 버튼을 클릭하면 alert 창이 뜨는 것을 확인할 수 있습니다.","style":[]},{"comp":"text","order":"13","enter":"8","text":"이처럼 submit 이벤트를 사용하면 폼 전송에 필요한 내용을 처리할 수 있습니다.","style":[]},{"comp":"check","order":"14","enter":"2","id":"a1d69cb8","text":"교재학습이 완료되었습니다.","style":[{"target":"교재학습이 완료되었습니다.","type":"font-size:20px;color:gray;"}]},{"comp":"ending","order":"15","enter":"6","style":[]}]}}],
    "icon": "undraw_fill_form_re_cwyf.svg"
}