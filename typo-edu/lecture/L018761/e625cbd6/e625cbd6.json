{
    "title": "상호작용과 모듈",
    "id": "e625cbd6",
    "time": 1673238147562,
    "pages": [{"da33b3e3":{"title":"상호작용 인터페이스 기능 : alert, prompt, confirm","id":"da33b3e3","time":1679237295133,"content":[{"comp":"title","order":"1","enter":"2","text":"상호작용 인터페이스 기능 : alert, prompt, confirm","style":[]},{"comp":"text","order":"2","enter":"3","text":"최초의 웹사이트는 html로만 작성되어 css, javascript가 없었습니다. 문서내 하이퍼링크로 통해 다른 사이트로의 이동할 수만 있었습니다.","style":[]},{"comp":"image","order":"3","enter":"0","width":"600","src":"./lecture/9627cb42/e625cbd6/1_1.png","style":[]},{"comp":"par","order":"4","enter":"3","style":"font-size:11px;;text-align:center;color:gray;","text":"(좌) 최초의 웹페이지 / (우) html 문서\n출처 : http://info.cern.ch/hypertext/WWW/TheProject.html"},{"comp":"text","order":"5","enter":"2","text":"자바스크립트는 키보드 입력, 마우스 클릭, 브라우저의 스크롤 등을 감지하고 이에 적절한 반응을 처리해주는 프로그래밍 언어입니다. 즉, 웹페이지에서 사용자와 상호작용할 수 있도록 합니다. ","style":[]},{"comp":"text","order":"6","enter":"2","text":"자바스크립트의 상호작용 요소를 정리하면 다음과 같습니다.","style":[]},{"comp":"sub","order":"7","enter":"0","text":"다음을 하나씩 클릭해 내용을 확인해 보세요.","style":[{"target":"다음을 하나씩 클릭해 내용을 확인해 보세요.","type":"font-size:10px;color:hotpink;"}]},{"comp":"hidebox","order":"8","enter":"0","id":"0e22ebd8","src":"- 웹페이지 구성요소의 선택","style":[]},{"comp":"hidebox","order":"9","enter":"0","id":"4c48e8bd","src":"- 선택한 요소의 수정","style":[]},{"comp":"hidebox","order":"10","enter":"0","id":"4bcf282a","src":"- 프로그래밍을 통한 선택요소의 처리","style":[]},{"comp":"hidebox","order":"11","enter":"3","id":"7c916185","src":"- 브라우저와 사용자의 변화 감지","style":[]},{"comp":"text","order":"12","enter":"2","text":"그렇다면 브라우저에서 사용할 수 있는 기본적인 상호작용의 사용자 인터페이스 기능에 어떤 것들이 있는지 알아보겠습니다.","style":[]},{"comp":"text","order":"13","enter":"2","text":"(1) alert","style":[{"target":"(1) alert","type":"font-size:x-large;"}]},{"comp":"text","order":"14","enter":"2","text":"이는 교재에서 여러번 사용해 본 기능입니다. 사용자가 \"확인\" 또는 \"OK\" 버튼을 클릭할 때까지 메세지를 보여주는 창을 띄웁니다.","style":[{"target":"사용자가 \"확인\" 또는 \"OK\" 버튼을 클릭할 때까지 메세지를 보여주는 창","type":"box-shadow: inset 0 -6px 0 #1EFFF7;"}]},{"comp":"par","order":"15","enter":"3","style":"","text":"<div style=\"background:white;box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);font-size:14px;border:1px solid rgba(0, 0, 0, 0.3);padding:10px 20px 20px;border-radius:4px;margin:0 auto;\">페이지 내용:\n<< 메시지를 보여줍니다 >>\n<button style='padding:0px 10px;float:right;border:1px solid rgba(0, 0, 0, 0.1);border-radius:4px;margin:4px;'>확인</button>\n</div>"},{"comp":"text","order":"16","enter":"2","text":"위와 같은 메시지 창을 모달창(modal window)이라고 부릅니다. 모달은 사용자 이목을 끌기위한 기법으로 사용자는 모달창 외부의 요소에 접근할 수 없습니다. ","style":[{"target":"모달창","type":"font-size:x-large;color:#8F9DD8;"},{"target":"(modal window)","type":"font-size:small;"}]},{"comp":"text","order":"17","enter":"0","text":"다음과 같이 alert 키워드를 사용합니다.","style":[]},{"comp":"aceEditor","order":"18","enter":"5","height":"50","start":"","text":"alert('메시지 내용');","style":[]},{"comp":"text","order":"19","enter":"2","text":"(2) prompt","style":[{"target":"(2) prompt","type":"font-size:x-large;"}]},{"comp":"check","order":"20","enter":"2","id":"7086b86d","text":"이는 입력창과 확인, 취소 버튼을 포함한 모달창을 띄웁니다.","style":[]},{"comp":"direction","order":"21","enter":"0","codeId":"13f30e50","targetLine":"1","title":"prompt","text":"다음의 코드를 따라서 입력하고 실행해 보세요.","bgCode":"\nprint(answer);","style":[]},{"comp":"aceEditor","order":"22","enter":"12","height":"50","start":"","text":"let answer = prompt('좋아하는 과일을 입력해보세요');","style":[]},{"comp":"text","order":"23","enter":"0","text":"prompt는 모달창에서 보여줄 메시지와 입력필드의 초기값의 2개 인수를 전달받습니다. 초기값의 경우 선택 옵션입니다.","style":[]},{"comp":"text","order":"24","enter":"2","text":"위와 같이 prompt 함수의 반환값을 변수에 대입해 처리합니다.","style":[]},{"comp":"text","order":"25","enter":"2","text":"코드를 실행하면 다음과 같은 모달창이 뜨고, 입력한 내용이 출력되는 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"26","enter":"0","style":"","text":"<div style=\"background:white;box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);font-size:14px;border:1px solid rgba(0, 0, 0, 0.3);padding:10px 20px;border-radius:4px;margin:0 auto;\">페이지 내용:\n좋아하는 과일을 입력해보세요\n<input style='width:100%;margin:5px auto;' value='바나나'></input>\n<div style=\"margin-top:5px;width:100%;justify-content:flex-end;display:flex;\"><button style='padding:0px 10px;border:1px solid rgba(0, 0, 0, 0.1);border-radius:4px;margin:4px;'>취소</button><button style='padding:0px 10px;border:1px solid rgba(0, 0, 0, 0.1);border-radius:4px;margin:4px;'>확인</button></div></div>"},{"comp":"par","order":"27","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> 바나나"},{"comp":"text","order":"28","enter":"5","text":"그리고 사용자가 모달창에서 취소 버튼을 클릭하면 null을 반환받습니다.","style":[]},{"comp":"text","order":"29","enter":"2","text":"(3) confirm","style":[{"target":"(3) confirm","type":"font-size:x-large;"}]},{"comp":"check","order":"30","enter":"2","id":"d2615bbe","text":"이는 사용자에게 질문을 할 수 있는 질문과 확인, 취소 버튼이 포함된 모달창을 띄웁니다.","style":[]},{"comp":"direction","order":"31","enter":"0","codeId":"2989daec","targetLine":"1","title":"confirm","text":"다음의 코드를 따라서 입력하고 실행해 보세요.","bgCode":"\nprint(answer);","style":[]},{"comp":"aceEditor","order":"32","enter":"12","height":"50","start":"","text":"let answer = confirm('[예시] 수정하시겠습니까?');","style":[]},{"comp":"text","order":"33","enter":"2","text":"confirm 함수 실행결과를 answer 변수에 담았습니다.","style":[]},{"comp":"text","order":"34","enter":"2","text":"코드를 실행하면 다음과 같은 모달창이 뜹니다.","style":[]},{"comp":"par","order":"35","enter":"2","style":"","text":"<div style=\"background:white;box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);font-size:14px;border:1px solid rgba(0, 0, 0, 0.3);padding:10px 20px;border-radius:4px;margin:0 auto;\">페이지 내용:\n[예시] 수정하시겠습니까?\n<div style=\"margin-top:5px;width:100%;justify-content:flex-end;display:flex;\"><button style='padding:0px 10px;border:1px solid rgba(0, 0, 0, 0.1);border-radius:4px;margin:4px;'>취소</button><button style='padding:0px 10px;border:1px solid rgba(0, 0, 0, 0.1);border-radius:4px;margin:4px;'>확인</button></div></div>"},{"comp":"text","order":"36","enter":"5","text":"위 창에서 확인을 클릭하면 true가 출력되고, 취소를 클릭하면 false가 출력됩니다.","style":[{"target":"true","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"},{"target":"false","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"37","enter":"2","text":"이상 3가지 상호작용을 위한 사용자 인터페이스 기능에 대해 살펴봤습니다. 이들 기능으로 생성되는 모달창은 브라우저마다 모양이 다르며, 그 모양과 위치 등은 별도 수정할 수 없습니다.","style":[]},{"comp":"text","order":"38","enter":"6","text":"사용자에게 단순 메시지를 알리고 싶다면 alert, 사용자 답변이 필요하다면 prompt,  사용자 확인이 필요하다면 confirm의 기능을 적절하게 활용할 수 있습니다. 이처럼 최소한의 상호작용을 위한 기능 사용을 시도해 보시기 바랍니다.","style":[{"target":"","type":""}]}]}},{"4ace9ed2":{"title":"모듈이란","id":"4ace9ed2","time":1679237302190,"content":[{"comp":"title","order":"1","enter":"2","text":"모듈이란","style":[]},{"comp":"text","order":"2","enter":"0","text":"모듈은 애플리케이션을 구성하는 요소로 재사용이 가능한 코드 조각을 말합니다.","style":[{"target":"재사용이 가능한 코드 조각","type":"font-family:sans-serif;font-size:18px;background:#00C2C9;color:white;padding:2px;"}]},{"comp":"text","order":"3","enter":"2","text":"즉, 스크립트 파일 하나를 모듈로 볼 수 있습니다.","style":[]},{"comp":"text","order":"4","enter":"2","text":"모듈은 세부 사항은 캡슐화 하고, 필요한 부분만 API로 외부에 공개됩니다.","style":[]},{"comp":"image","order":"5","enter":"2","width":"190","src":"./lecture/9627cb42/e625cbd6/2_1.png","style":[]},{"comp":"text","order":"6","enter":"0","text":"그렇다면 모듈은 왜 사용하는 걸까요? ","style":[]},{"comp":"text","order":"7","enter":"2","text":"모듈 사용의 목적성에 대해 알아보겠습니다.","style":[]},{"comp":"check","order":"8","enter":"2","id":"4c8b5b14","text":"(1) 유지보수성","style":[{"target":"유지보수성","type":"box-shadow: inset 0 -6px 0 #C98200;"}]},{"comp":"text","order":"9","enter":"2","text":"프로그램에 사용되는 각 기능들이 모듈화가 잘 되어 있다면, 코드간의 의존성이 낮아지므로 기능 개선을 위한 수정작업시 유지보수가 간편해집니다.","style":[]},{"comp":"check","order":"10","enter":"2","id":"1c77c57f","text":"(2) 재사용성","style":[{"target":"재사용성","type":"box-shadow: inset 0 -6px 0 #C98200;"}]},{"comp":"text","order":"11","enter":"2","text":"모듈화된 기능은 필요할 때마다 얼마든지 재사용이 가능합니다. 똑같은 기능에 대한 코드를 매번 반복해 작업하는 것보다 효율적입니다.","style":[]},{"comp":"check","order":"12","enter":"2","id":"c42c6729","text":"(3) 네임스페이스화","style":[{"target":"네임스페이스화","type":"box-shadow: inset 0 -6px 0 #C98200;"}]},{"comp":"text","order":"13","enter":"3","text":"전역변수의 경우, 전역 공간에 할당되므로 코드양이 많아질수록 네임스페이스의 중복 케이스를 피할 수 없습니다. 하지만, 모듈로 분리된다면 모듈 안에서의 네임스페이스를 가지므로 이러한 문제를 해결할 수 있습니다.","style":[]},{"comp":"text","order":"14","enter":"2","text":"자바스크립트는 클라이언트 사이드 스크립트 언어로 시작되어 애초에는 모듈화가 어려운 프로그래밍 언어였습니다.","style":[]},{"comp":"image","order":"15","enter":"0","width":"310","src":"./lecture/9627cb42/e625cbd6/2_2.png","style":[]},{"comp":"text","order":"16","enter":"3","text":"그러나, 자바스크립트의 범용적 사용이 두드러지면서 모듈화에 대한 논의가 이뤄지게 되었고 그 결과, CommonJS, AMD, UMD, ESM으로 나타나게 되었습니다.","style":[]},{"comp":"text","order":"17","enter":"6","text":"계속해서 이러한 모듈 정의 방식에 대해서 알아보겠습니다.","style":[]}]}},{"df050a9f":{"title":"모듈정의 : CommonJS","id":"df050a9f","time":1679237700783,"content":[{"comp":"title","order":"1","enter":"2","text":"모듈 정의 : CommonJS","style":[]},{"comp":"text","order":"2","enter":"0","text":"CommonJS는 자바스크립트를 서버사이드에서도 사용할 수 있도록 마련된 모듈화 표준입니다. ","style":[]},{"comp":"text","order":"3","enter":"2","text":"이 프로젝트는 모질라의 엔지니어 Kevin Dangoor에 의해 2009년 1월 시작되었습니다.","style":[]},{"comp":"text","order":"4","enter":"0","text":"이들 그룹은 자바스크립트가 범용적으로 사용되기 위해서는 다음의 문제가 있다고 정리했습니다. ","style":[]},{"comp":"par","order":"5","enter":"3","style":"","text":"<div style='padding-left: 20px;color:gray;'>• 호환가능한 표준 라이브러리가 없다. \n• 다른 모듈 삽입의 표준 방법이 없다.\n• 데이터베이스 연결을 위한 표준 인터페이스가 없다.\n• 의존성 문제 해결을 포함한 공통 패키지 모듈 저장소가 필요하다.\n• 코드 패키징, 배포, 설치 방법이 필요하다.</div>"},{"comp":"check","order":"6","enter":"0","id":"435d5620","text":"CommonJS의 모듈화는 다음의 3가지 부분으로 나뉩니다.","style":[]},{"comp":"par","order":"7","enter":"3","style":"","text":"<div style='padding-left: 20px;'>(1) 스코프 : 모듈만의 독립적인 실행영역\n(2) 정의 : 모듈 정의 exports 객체\n(3) 사용 : 모듈 사용 require 함수 사용</div>"},{"comp":"text","order":"8","enter":"2","text":"다음과 같이 2개 파일이 있다고 가정해 보겠습니다.","style":[]},{"comp":"sub","order":"9","enter":"0","text":"- module.js","style":[{"target":"- module.js","type":"font-family:IBM Plex Mono;padding-left:10px;"}]},{"comp":"aceEditor","order":"10","enter":"2","height":"130","start":"","text":"var numA = 8; numB = 2;\nexports.sum = (a, b) => {\n  return numA + numB + a + b;\n}","style":[]},{"comp":"sub","order":"11","enter":"0","text":"- main.js","style":[{"target":"- main.js","type":"font-family:IBM Plex Mono;padding-left:10px;"}]},{"comp":"aceEditor","order":"12","enter":"3","height":"105","start":"","text":"var numA = 3; numB = 5;\nvar mod = require(\"./module\");\nmod.sum(numA, numb);","style":[]},{"comp":"text","order":"13","enter":"2","text":"서버사이드에서는 파일마다 독립적인 스코프가 있으므로 모듈을 파일로 나눠서 작성하면 전역변수가 겹치지 않습니다.","style":[]},{"comp":"text","order":"14","enter":"2","text":"module.js에서는 (2라인) sum 함수를 내보내기 위해 exports 키워드를 사용합니다.","style":[{"target":"exports","type":"font-family:sans-serif;font-size:17px;background:#C93F00;color:white;padding:2px;"},{"target":"(2라인)","type":"font-size:small;"}]},{"comp":"text","order":"15","enter":"2","text":"그리고 main.js에서는 require 함수를 사용해 module.js에서 내보내기한 함수를 가져오고, sum 함수를 호출합니다.","style":[{"target":"require","type":"font-family:sans-serif;font-size:17px;background:#D849D8;color:white;padding:2px;"}]},{"comp":"text","order":"16","enter":"2","text":"따라서, main.js의 3라인 코드 실행 결과는 다음과 같습니다.","style":[]},{"comp":"par","order":"17","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> 18 <font size=2 color=gray>// 8+2+3+5</font>"},{"comp":"text","order":"18","enter":"2","text":"이러한 CommonJS의 모듈화 방식은 브라우저 동작에서는 파일 로드 순서에 따라 전역변수를 덮어쓰는 문제가 발생합니다.","style":[]},{"comp":"text","order":"19","enter":"6","text":"이러한 문제를 해결하기 위해 추가로 서버 모듈을 비동기적으로 클라이언트에 전송할 수 있는 모듈 전송 포맷(module transport format)이 정의되었습니다.","style":[]}]}},{"4d922b42":{"title":"모듈정의 : AMD, UMD","id":"4d922b42","time":1679237771562,"content":[{"comp":"title","order":"1","enter":"2","text":"모듈정의 : AMD, UMD","style":[]},{"comp":"text","order":"2","enter":"2","text":"AMD(Asynchronous Module Definition)는 비동기 모듈 사용에 대한 합의점을 찾지 못하고 CommomJS에서 독립한 그룹입니다.","style":[{"target":"(Asynchronous Module Definition)","type":"font-size:small;"},{"target":"AMD","type":"font-size:xx-large;"}]},{"comp":"text","order":"3","enter":"0","text":"AMD는 다음의 특징이 있습니다.","style":[]},{"comp":"par","order":"4","enter":"3","style":"","text":"<div style='padding-left: 20px;color:gray;'>• 동적 로딩\n• 의존성 관리\n• 모듈화</div>"},{"comp":"text","order":"5","enter":"0","text":"html 문서에서 많은 script 태그의 사용은 페이지 랜더링 시간을 지연시킵니다. ","style":[]},{"comp":"text","order":"6","enter":"2","text":"동적 로딩은 페이지 렌더링을 방해하지 않으면서 필요한 파일만 로딩하는 방법을 말합니다. ","style":[]},{"comp":"text","order":"7","enter":"0","text":"동적로딩의 방법 중 하나로 script 태그를 동적으로 삽입하는 방법이 있습니다. 그러나, 필요한 파일 수가 많고 순서에 따라 비동기로 처리 하다보면 콜백 헬이 발생할 수 있습니다. ","style":[{"target":"script 태그를 동적으로 삽입","type":"box-shadow: inset 0 -6px 0 #ABFF84;"},{"target":"동적로딩","type":"font-family:sans-serif;font-size:18px;background:gray;color:white;padding:2px;"}]},{"comp":"aceEditor","order":"8","enter":"3","height":"260","start":"","text":"loadScript('file1.js', function () {  \n    loadScript('file2.js', function () {\n        loadScript('file3.js', function () {\n            loadScript('file4.js', function () {\n                // callback hell\n            });   \n        });   \n    });   \n});","style":[]},{"comp":"text","order":"9","enter":"2","text":"AMD는 이러한 문제를 의존성 관리를 통해 해결했습니다. 이를 잘 구현해 놓은 대표적인 RequireJS 라이브러리의 예시를 통해 살펴보겠습니다.","style":[]},{"comp":"text","order":"10","enter":"0","text":"먼저, html 문서내의 script 태그는 다음과 같이 사용합니다.","style":[]},{"comp":"text","order":"11","enter":"0","text":"<div style='overflow:auto;text-align:center;margin:0 auto;padding: 5px;font-family:IBM Plex Mono;font-size:14px;color: #0051DD;'><xmp><script data-main=\"index.js\" src=\"require.js\"></script></xmp></div>","style":[]},{"comp":"text","order":"12","enter":"2","text":"data-min 속성에 require.js 가 로드된 후에 실행할 자바스크립트 파일 경로를 넣습니다.","style":[]},{"comp":"sub","order":"13","enter":"0","text":"- index.js","style":[{"target":"- index.js","type":"font-family:IBM Plex Mono;padding-left:10px;"}]},{"comp":"aceEditor","order":"14","enter":"2","height":"320","start":"","text":"require.config({\n    baseUrl: '/',\n    paths: {\n      modA: 'modA',\n      modB: 'modB',\n    }\n});\n\nrequire(['modA'], (a) => {\n    a.run();\n});","style":[]},{"comp":"text","order":"15","enter":"2","text":"require.config 를 통해 기본 설정을 변경할 수 있습니다. baseUrl은 기본경로이며, paths는 모듈의 경로를 나타냅니다.","style":[{"target":"require.config","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"16","enter":"3","text":"그리고 (9~11라인) require 를 사용해 modA 모듈이 로드되면 이를 매개변수로 전달받아 a 모듈의 run 함수를 호출하는 콜백 함수를 호출합니다.","style":[{"target":"(9~11라인)","type":"font-size:small;"},{"target":"require","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"sub","order":"17","enter":"0","text":"- modA.js","style":[{"target":"- modA.js","type":"font-family:IBM Plex Mono;padding-left:10px;width:100%;"}]},{"comp":"aceEditor","order":"18","enter":"2","height":"150","start":"","text":"define(() => {\n    return {\n      run: () => alert('run 실행')\n    };\n});","style":[]},{"comp":"text","order":"19","enter":"5","text":"modA.js 파일을 살펴보면, define 함수를 통해 모듈을 정의합니다. 이 역시도 require 처럼 의존성 모듈 배열을 사용할 수 있습니다. ","style":[{"target":"define","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"20","enter":"2","text":"UMD(Universal Module Definition)는 CommonJS와 AMD를 통합한 버전으로 볼 수 있습니다.","style":[{"target":"(Universal Module Definition)","type":"font-size:small;"},{"target":"UMD","type":"font-size:xx-large;"}]},{"comp":"text","order":"21","enter":"0","text":"다음과 같습니다.","style":[]},{"comp":"aceEditor","order":"22","enter":"4","height":"370","start":"","text":"(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory); // AMD\n    } \n    else if (typeof module === 'object' && module.exports) {\n        module.exports = factory(); // CommonJS\n    } \n    else {\n        root.returnExports = factory(); // browser\n    }\n})(typeof self !== 'undefined' ? self : this, function() {\n    return {};\n});","style":[]},{"comp":"check","order":"23","enter":"0","id":"a3f9ca09","text":"define이 함수이고, define.amd 객체를 가지고 있으면 AMD 포맷에 따라 모듈을 정의합니다.","style":[]},{"comp":"aceEditor","order":"24","enter":"2","height":"105","start":"2","text":"    if (typeof define === 'function' && define.amd) {\n        define([], factory); // AMD\n    } ","style":[]},{"comp":"check","order":"25","enter":"0","id":"20da8454","text":"module이 객체이고, module.exports 객체를 가지고 있으면 CommonJS 방식으로 모듈을 정의합니다.","style":[]},{"comp":"aceEditor","order":"26","enter":"2","height":"105","start":"5","text":"    else if (typeof module === 'object' && module.exports) {\n        module.exports = factory(); // CommonJS\n    } ","style":[]},{"comp":"text","order":"27","enter":"0","text":"나머지는 브라우저로 판단합니다.","style":[]},{"comp":"aceEditor","order":"28","enter":"2","height":"105","start":"8","text":"    else {\n        root.returnExports = factory(); // browser\n    }","style":[]},{"comp":"check","order":"29","enter":"0","id":"b5491e46","text":"여기에서 사용된 2가지 파라미터는 다음과 같습니다.","style":[]},{"comp":"par","order":"30","enter":"3","style":"","text":"<div style='padding-left: 20px;'>- root : 브라우저의 window\n- factory : 모듈을 감싸는 함수</div>"},{"comp":"text","order":"31","enter":"0","text":"함수를 즉시 실행하는데 사용하는 2가지 인자는 root와 factory를 가리킵니다.","style":[]},{"comp":"aceEditor","order":"32","enter":"7","height":"105","start":"11","text":"})(typeof self !== 'undefined' ? self : this, function() {\n    return {};\n});","style":[]}]}},{"afc5a694":{"title":"모듈정의 : ESM","id":"afc5a694","time":1679237886418,"content":[{"comp":"title","order":"1","enter":"2","text":"모듈정의 : ESM","style":[]},{"comp":"text","order":"2","enter":"2","text":"ESM(ECMAScript Module)은 ES6에 추가된 표준 모듈입니다.","style":[{"target":"(ECMAScript Module)","type":"font-size:small;"},{"target":"ESM","type":"font-size:xx-large;"}]},{"comp":"check","order":"3","enter":"0","id":"4b24e3cd","text":"script 태그에 type=\"module\" 속성을 추가함으로써 ESM 모듈로 동작합니다. 이때 파일 확장자는 mjs를 사용하도록 권장하고 있습니다.","style":[]},{"comp":"par","order":"4","enter":"0","style":"","text":"<div style='overflow:auto;text-align:center;margin:0 auto;padding: 5px;font-family:IBM Plex Mono;font-size:14px;color: #0051DD;'><xmp><script type=\"module\" src=\"app.mjs\"></script></xmp></div>"},{"comp":"text","order":"5","enter":"2","text":"이 모듈 기능을 사용하면, 각각은 독자적인 모듈 스코프를 가집니다.","style":[]},{"comp":"text","order":"6","enter":"2","text":"(1) export","style":[{"target":"(1) export","type":"font-size:xx-large;"}]},{"comp":"check","order":"7","enter":"2","id":"3605230c","text":"따라서, 다른 곳에서 참조하도록 공개하려면 export 키워드를 사용합니다.","style":[{"target":"export","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"sub","order":"8","enter":"0","text":"- lib.mjs","style":[{"target":"- lib.mjs","type":"font-family:IBM Plex Mono;padding-left:10px;"}]},{"comp":"aceEditor","order":"9","enter":"2","height":"50","start":"","text":"export const pin = 'BLABLA22';","style":[]},{"comp":"text","order":"10","enter":"2","text":"변수, 함수, 클래스 앞에 export 키워드를 사용하며, 각각 붙여주거나 한꺼번에 묶어서 다음과 같은 형태로도 사용할 수 있습니다.","style":[]},{"comp":"par","order":"11","enter":"3","style":"text-align:center;margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":"export { variable, function, class }"},{"comp":"check","order":"12","enter":"2","id":"d885fb8c","text":"또, 모듈을 내보내기 할 때, export default 키워드를 사용할 수 있습니다. ","style":[{"target":"export default","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"13","enter":"0","text":"이는 하나의 파일에서 단 하나의 변수나 클래스 등에 사용할 수 있으며, let, const, var와 같은 키워드에는 사용할 수 없습니다.","style":[]},{"comp":"aceEditor","order":"14","enter":"5","height":"50","start":"","text":"export default () => {}","style":[]},{"comp":"text","order":"15","enter":"2","text":"(2) import","style":[{"target":"(2) import","type":"font-size:xx-large;"}]},{"comp":"check","order":"16","enter":"2","id":"5cea52af","text":"모듈을 가져오고자 한다면 import 키워드를 사용합니다.","style":[{"target":"import","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"sub","order":"17","enter":"0","text":"- app.mjs","style":[{"target":"- app.mjs","type":"font-family:IBM Plex Mono;padding-left:10px;"}]},{"comp":"aceEditor","order":"18","enter":"2","height":"80","start":"","text":"import pin from './lib.mjs';\n//use pin..","style":[]},{"comp":"text","order":"19","enter":"2","text":"가져올때는 내보내기 한 이름으로 가져올 수 있으며, 가져올 대상이 여러개 일때 한꺼번에 가져오려면 이름 대신 * 기호를 사용합니다. ","style":[{"target":"*","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"check","order":"20","enter":"0","id":"13dad2cf","text":"또, 다른 이름으로 가져올 수 있는데, 이럴때는 as 키워드를 사용합니다.","style":[{"target":"as","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"aceEditor","order":"21","enter":"3","height":"80","start":"","text":"import * as mod from './lib.mjs';\n// use mod..","style":[]},{"comp":"text","order":"22","enter":"6","text":"그리고 export default 한 모듈은 as 키워드 없이 임의의 이름으로 import 할 수 있습니다.","style":[]},{"comp":"quiz","order":"23","enter":"4","style":[],"quiz":[{"type":"multiple","id":"6b8c2fcb","answer":"4","question":"다음 중 모듈에서 내보낸 함수를 다른 이름으로 사용할 때 사용하는 키워드는 무엇인가요?","example":["get","rename","export","as"]},{"type":"multiple","id":"10a6677f","answer":"2","question":"다음 중 입력창과 확인, 취소 버튼을 포함한 모달창을 띄우는 명령어는 무엇인가요?","example":["alert","prompt","confirm"]},{"type":"multiple","id":"753a9942","answer":"4","question":"다음의 모듈정의 방식 중 import와 export 키워드를 사용해 독자적인 모듈 스코프를 가지는 정의 방식은 무엇인가요?","example":["commonJs","AMD","UMD","ESM"]}]},{"comp":"completeBtn","order":"24","enter":"4","id":"20be3950","style":[]},{"comp":"ending","order":"25","enter":"4","style":[]}]}}],
    "icon": "undraw_usability_testing_re_uu1g.svg"
}