{
    "title": "클래스",
    "id": "379e9fca",
    "time": 1673238107750,
    "pages": [{"bbf8310e":{"title":"클래스란","id":"bbf8310e","time":1678149848547,"content":[{"comp":"title","order":"1","enter":"2","text":"클래스란","style":[]},{"comp":"text","order":"2","enter":"2","text":"클래스(class)는 ES6 문법에 추가된 것으로, 객체를 생성하기 위한 템플릿으로 볼 수 있습니다.","style":[{"target":"클래스(class)","type":"color:#FF0592;font-size:xx-large;"},{"target":"(class)","type":"font-size:small;"},{"target":"객체를 생성하기 위한 템플릿","type":"box-shadow: inset 0 -6px 0 #FFC1CD;"}]},{"comp":"check","order":"3","enter":"2","id":"9219abdc","text":"자바스크립트는 프로토타입 기반의 객체지향 프로그래밍 언어입니다.","style":[]},{"comp":"text","order":"4","enter":"0","text":"다음과 같은 프로토타입 코드가 있을 때,","style":[]},{"comp":"aceEditor","order":"5","enter":"3","height":"285","start":"","text":"function User(name) {\n    this.name = name;\n}\n\nUser.prototype.speak = function () {\n    print(`My name is ${this.name}.`);\n};\n\nlet person = new User(\"Sumi\");\nperson.speak(); // My name is Sumi.","style":[]},{"comp":"text","order":"6","enter":"0","text":"클래스 문법을 사용하면 다음과 같습니다.","style":[]},{"comp":"aceEditor","order":"7","enter":"3","height":"340","start":"","text":"class User {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        print(`My name is ${this.name}.`);\n    }\n}\n\nlet person = new User(\"Sumi\");\nperson.speak(); // My name is Sumi.","style":[]},{"comp":"text","order":"8","enter":"2","text":"코드 비교를 통해 알 수 있듯이, 클래스는 클래스 기반의 프로그래밍에 익숙한 개발자들을 위해 단순명료한 새로운 문법으로 제시되었습니다.","style":[]},{"comp":"text","order":"9","enter":"2","text":"prototype 속성으로 정의된 함수 speak와 User 클래스의 메서드 speak가 같은 기능으로 동작해, 위의 2가지 예제 코드 모두 다음과 같이 출력됩니다. ","style":[]},{"comp":"par","order":"10","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> My name is Sumi."},{"comp":"check","order":"11","enter":"2","id":"fe335f67","text":"클래스는 class 키워드와 클래스명을 사용해 생성합니다.","style":[{"target":"class","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"12","enter":"2","text":"클래스명은 첫 문자가 대문자인 파스칼 케이스를 따르는 것이 일반적이지만, 그렇지 않더라도 오류가 발생하지는 않습니다.","style":[{"target":"클래스명은 첫 문자가 대문자","type":"box-shadow: inset 0 -6px 0 #00DD3B;"}]},{"comp":"text","order":"13","enter":"0","text":"그리고 new 연산자를 사용해 name 속성이 \"Sumi\"인 인스턴스(instance)를 생성해 person 변수에 대입했습니다.","style":[{"target":"인스턴스(instance)","type":"font-family:sans-serif;font-size:18px;background:green;color:white;padding:2px;"},{"target":"(instance)","type":"font-size:small;"}]},{"comp":"aceEditor","order":"14","enter":"3","height":"50","start":"11","text":"let person = new User(\"Sumi\");","style":[]},{"comp":"check","order":"15","enter":"0","id":"3838426a","text":"이렇게 생성된 인스턴스는 클래스가 가진 고유의 속성과 메서드를 가지게 됩니다.","style":[{"target":"","type":""}]},{"comp":"text","order":"16","enter":"0","text":"따라서, speak 메서드를 호출할 수 있습니다. ","style":[]},{"comp":"aceEditor","order":"17","enter":"3","height":"50","start":"12","text":"person.speak(); ","style":[]},{"comp":"direction","order":"18","enter":"0","codeId":"ea0c22f2","targetLine":"13","title":"클래스 인스턴스","text":"다음의 코드를 따라서 입력하고, 실행해 보세요.","bgCode":"class User {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        print(`My name is ${this.name}.`);\n    }\n}\n\nlet person = new User(\"Sumi\");\nperson.speak(); // My name is Sumi.\n","style":[]},{"comp":"aceEditor","order":"19","enter":"12","height":"50","start":"13","text":"print(person instanceof User);","style":[]},{"comp":"check","order":"20","enter":"2","id":"368e49fd","text":"person이 User의 인스턴스인지 확인하기 위한 instanceof 연산자를 사용했습니다.","style":[{"target":"instanceof","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"21","enter":"2","text":"따라서, 코드를 실행하면 다음과 같이 출력되는 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"22","enter":"7","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> true"},{"comp":"text","order":"23","enter":"0","text":"클래스는 다음과 같이 표현식으로도 만들 수 있습니다.","style":[{"target":"표현식","type":"text-emphasis: circle #FF848A;font-family:sans-serif;font-size:17px;"}]},{"comp":"aceEditor","order":"24","enter":"3","height":"260","start":"","text":"let User = class {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        print(`My name is ${this.name}.`);\n    }\n};","style":[]},{"comp":"check","order":"25","enter":"0","id":"b269b0ad","text":"클래스 표현식이 할당된 User 변수를 사용해 인스턴스를 생성할 수 있습니다.","style":[]},{"comp":"direction","order":"26","enter":"0","codeId":"5b40d4b0","targetLine":"10","title":"클래스 표현식","text":"speak 메서드를 호출하는 다음의 코드를 따라서 입력하고 실행해 보세요","bgCode":"let User = class {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        print(`My name is ${this.name}.`);\n    }\n};\n","style":[]},{"comp":"aceEditor","order":"27","enter":"12","height":"50","start":"10","text":"new User('haha').speak();","style":[]},{"comp":"text","order":"28","enter":"2","text":"코드를 실행하면 다음과 같이 출력되는 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"29","enter":"6","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> My name is haha."}]}},{"42a570e3":{"title":"constructor","id":"42a570e3","time":1678178563050,"content":[{"comp":"title","order":"1","enter":"2","text":"constructor","style":[]},{"comp":"check","order":"2","enter":"2","id":"1df9bd28","text":"constructor 는 인스턴스 생성시 호출되는 초기화 메서드 입니다.","style":[{"target":"constructor","type":"font-size:xx-large;color:#009126;"},{"target":"초기화","type":"text-emphasis: circle #009126;font-family:sans-serif;font-size:17px;"}]},{"comp":"aceEditor","order":"3","enter":"3","height":"260","start":"","text":"class User {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        print(`My name is ${this.name}.`);\n    }\n}","style":[]},{"comp":"text","order":"4","enter":"0","text":"위에서 2~4라인이 이에 해당합니다. ","style":[]},{"comp":"aceEditor","order":"5","enter":"2","height":"105","start":"2","text":"    constructor(name) {\n        this.name = name;\n    }","style":[]},{"comp":"check","order":"6","enter":"0","id":"4dce8e49","text":"this는 클래스가 생성하는 인스턴스 객체를 가리킵니다.","style":[{"target":"클래스가 생성하는 인스턴스 객체","type":"color:#9900F2;"}]},{"comp":"text","order":"7","enter":"2","text":"그리고 name은 클래스 필드입니다.","style":[{"target":"클래스 필드","type":"color:#D81A76;"}]},{"comp":"text","order":"8","enter":"2","text":"constructor는 클래스 내에 하나만 존재할 수 있으며, 복수로 사용할 경우 오류가 발생합니다.","style":[{"target":"클래스 내에 하나만 존재","type":"box-shadow: inset 0 -6px 0 #F7A900;"},{"target":"하나만","type":"text-emphasis: circle #FF848A;font-family:sans-serif;font-size:17px;"}]},{"comp":"check","order":"9","enter":"0","id":"3fcc1c3d","text":"그리고 constructor는 생략이 가능합니다. ","style":[{"target":"생략이 가능","type":"box-shadow: inset 0 -6px 0 #F6FF00;"}]},{"comp":"text","order":"10","enter":"2","text":"constructor가 생략되면, 빈 객체가 생성되므로 프로퍼티는 동적으로 추가해야 합니다.","style":[]},{"comp":"direction","order":"11","enter":"0","codeId":"11c73fe3","targetLine":"8","title":"constructor","text":"에디터를 열고 코드를 실행해보고, 다음의 코드를 추가하고 실행해 보세요.","bgCode":"class user {\n    speak() {\n        print(`My name is ${this.name}.`);\n    }\n}\n\nlet person = new user();\n\nperson.speak(); ","style":[]},{"comp":"aceEditor","order":"12","enter":"12","height":"50","start":"8","text":"person.name = \"Sumi\";","style":[]},{"comp":"text","order":"13","enter":"2","text":"코드에서 constructor가 생략되었으며, 프로퍼티를 동적으로 추가하기 전에는 name 프로퍼티가 없으므로<br>코드를 추가하기 전에 실행하면 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"14","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> My name is <font color=purple>undefined</font>."},{"comp":"check","order":"15","enter":"2","id":"fed49490","text":"8라인의 코드를 추가하고 실행하면, name 속성이 추가되어 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"16","enter":"4","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> My name is <font color=purple>Sumi</font>."},{"comp":"check","order":"17","enter":"3","id":"fc580063","text":"constructor는 인스턴스 생성시 클래스 필드가 초기화되므로, 초기화가 필요하다면 constructor를 생략해서는 안됩니다.","style":[{"target":"초기화가 필요하다면 constructor를 생략해서는 안됩니다","type":"background:#E5FCFF;padding:2px;"}]},{"comp":"check","order":"18","enter":"0","id":"9dff2283","text":"또, 클래스 필드의 선언과 초기화는 반드시 constructor 내부에서 이뤄져야 합니다. ","style":[{"target":"내부","type":"text-emphasis: circle #FF848A;font-family:sans-serif;font-size:17px;"},{"target":"클래스 필드의 선언과 초기화","type":"background:#FFE5ED;padding:2px;"}]},{"comp":"text","order":"19","enter":"6","text":"클래스 필드를 클래스 바디에서 선언하면 오류가 발생합니다.","style":[]}]}},{"91d56197":{"title":"getter와 setter","id":"91d56197","time":1678180627729,"content":[{"comp":"title","order":"1","enter":"2","text":"getter와 setter","style":[]},{"comp":"text","order":"2","enter":"0","text":"클래스는 연산 프로퍼티를 제공합니다.","style":[]},{"comp":"text","order":"3","enter":"2","text":"연산 프로퍼티(Computed Properties)란, 실제 값을 저장하는 프로퍼티가 아니라 특정 상태에 따른 값을 연산하는 프로퍼티를 말합니다.","style":[{"target":"연산 프로퍼티","type":"background:#ABFF84;padding:2px;"},{"target":"(Computed Properties)","type":"font-size:small;"}]},{"comp":"check","order":"4","enter":"0","id":"382d2f9d","text":"여기에는 접근자와 설정자가 필요합니다. ","style":[]},{"comp":"text","order":"5","enter":"2","text":"따라서, getter는 접근자이며, setter는 설정자 입니다.","style":[{"target":"접근자","type":"font-family:sans-serif;font-size:18px;background:#00C2C9;color:white;padding:2px;"},{"target":"설정자","type":"font-family:sans-serif;font-size:18px;background:#D86CA2;color:white;padding:2px;"}]},{"comp":"check","order":"6","enter":"2","id":"9868451d","text":"메서드 앞에 get 키워드를 사용해 getter를 정의합니다.","style":[{"target":"getter","type":"font-size:xx-large;color:#007FC9;"},{"target":"get","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"7","enter":"0","text":"다음의 코드로 살펴보겠습니다.","style":[]},{"comp":"aceEditor","order":"8","enter":"2","height":"375","start":"","text":"class User {\n    constructor(arr = []) {\n        this.member = arr;\n    }\n    \n    get firstMember() {\n        return this.member.length ? this.member[0] : null;\n    }\n    \n    set firstMember(who) {\n        this.member = [who, ... this.member];\n    }\n}","style":[]},{"comp":"text","order":"9","enter":"0","text":"User 클래스에 다음과 같이 접근자 getter가 정의되었습니다.","style":[]},{"comp":"aceEditor","order":"10","enter":"2","height":"115","start":"6","text":"    get firstMember() {\n        return this.member.length ? this.member[0] : null;\n    }","style":[]},{"comp":"text","order":"11","enter":"0","text":"get 키워드 다음에 firstMember 메서드 이름은 클래스 필드의 이름처럼 사용할 수 있습니다.","style":[{"target":"get","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"check","order":"12","enter":"3","id":"6e130681","text":"그리고 getter는 반드시 return문을 사용해 반환해야 합니다.","style":[{"target":"반드시 return문을 사용해 반환","type":"background:#E0FFEA;padding:2px;"}]},{"comp":"text","order":"13","enter":"2","text":"firstMember는 constructor에서 선언된 this.member 에서 첫번째 요소를 가져와 반환합니다. ","style":[{"target":"this.member","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"direction","order":"14","enter":"0","codeId":"0a20b08f","targetLine":"14","title":"getter","text":"다음의 코드를 추가하고 실행해 보세요.","bgCode":"class User {\n    constructor(arr = []) {\n        this.member = arr;\n    }\n    \n    get firstMember() {\n        return this.member.length ? this.member[0] : null;\n    }\n    \n    set firstMember(who) {\n        this.member = [who, ... this.member];\n    }\n}\n","style":[]},{"comp":"aceEditor","order":"15","enter":"12","height":"80","start":"14","text":"let club = new User(['one', 'two']);\nprint(club.firstMember);","style":[]},{"comp":"check","order":"16","enter":"0","id":"b2c17026","text":"2개 요소를 가진 배열로 User 클래스의 인스턴스를 생성해 club 변수에 대입했습니다. ","style":[]},{"comp":"aceEditor","order":"17","enter":"2","height":"50","start":"14","text":"let club = new User(['one', 'two']);","style":[]},{"comp":"check","order":"18","enter":"0","id":"77264dfb","text":"getter의 메서드 이름인 firstMember를 클래스 필드처럼 사용해 값을 출력합니다.","style":[]},{"comp":"aceEditor","order":"19","enter":"2","height":"50","start":"15","text":"print(club.firstMember);","style":[]},{"comp":"text","order":"20","enter":"2","text":"코드를 실행하면 member의 첫번째 요소가 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"21","enter":"5","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> one"},{"comp":"text","order":"22","enter":"0","text":"이번에는 User 클래스에 정의된 setter를 살펴보겠습니다.","style":[{"target":"setter","type":"font-size:xx-large;color:#FF7FBF;"}]},{"comp":"aceEditor","order":"23","enter":"2","height":"105","start":"10","text":"    set firstMember(who) {\n        this.member = [who, ... this.member];\n    }","style":[]},{"comp":"text","order":"24","enter":"2","text":"set 키워드 다음에 역시 클래스 필드이름으로 사용하는 firstMember 메서드가 정의되었습니다.","style":[{"target":"set","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"check","order":"25","enter":"2","id":"d01732b5","text":"스프레드 연산자를 사용한 ... this.member 는 this.member의 요소를 각각 분리합니다.","style":[{"target":"... this.member","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"26","enter":"2","text":"따라서 setter가 호출될 때 전달된 값(who)을 배열의 첫 요소로 하고, 나머지 요소들을 조합한 배열이 this.member 값으로 할당됩니다.","style":[]},{"comp":"direction","order":"27","enter":"0","codeId":"c568e7ec","targetLine":"15","title":"setter","text":"다음의 코드를 따라서 입력하고 실행해 보세요.","bgCode":"class User {\n    constructor(arr = []) {\n        this.member = arr;\n    }\n    \n    get firstMember() {\n        return this.member.length ? this.member[0] : null;\n    }\n    \n    set firstMember(who) {\n        this.member = [who, ... this.member];\n    }\n}\nlet club = new User(['one', 'two']);\n\nprint(club.member);","style":[]},{"comp":"aceEditor","order":"28","enter":"12","height":"50","start":"15","text":"club.firstMember = 'zero';","style":[]},{"comp":"check","order":"29","enter":"2","id":"f7a5b8a1","text":"클래스 필드에 값을 대입하면 setter가 호출됩니다. ","style":[]},{"comp":"text","order":"30","enter":"2","text":"따라서 club의 member를 출력하면 다음과 같이 첫번째 요소가 'Zero'로 추가된 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"31","enter":"5","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> [<font color=red>\"zero\"</font>,\"one\",\"two\"]"},{"comp":"text","order":"32","enter":"2","text":"getter와 setter는 해당 클래스의 prototype에 정의됩니다.","style":[]},{"comp":"image","order":"33","enter":"0","width":"300","src":"./lecture/9627cb42/379e9fca/3_1.png","style":[]},{"comp":"par","order":"34","enter":"3","style":"font-size:10px;text-align:center;color:gray;","text":"▴ User.prototype을 콘솔에 출력한 결과"},{"comp":"text","order":"35","enter":"6","text":"이와 같이 get, set을 사용해 클래스 필드값을 조작할 수 있습니다.","style":[]}]}},{"4ecd76fb":{"title":"정적 메서드","id":"4ecd76fb","time":1678342714211,"content":[{"comp":"title","order":"1","enter":"2","text":"정적 메서드","style":[]},{"comp":"text","order":"2","enter":"2","text":"클래스 내부의 메서드는 prototype에 정의됩니다. prototype이 아닌 클래스 함수 자체에 정의된 메서드를 정적 메서드라고 합니다.","style":[{"target":"정적 메서드","type":"font-size:xx-large;color:#824B00;"},{"target":"클래스 함수 자체에 정의된 메서드","type":"box-shadow: inset 0 -4px 0 #0085AA;"}]},{"comp":"check","order":"3","enter":"2","id":"df63a972","text":"정적 메서드는 static 키워드를 사용해 만들 수 있습니다.","style":[{"target":"static","type":"font-family:sans-serif;font-size:18px;background:#B656D8;color:white;padding:2px;"}]},{"comp":"text","order":"4","enter":"0","text":"다음은 정적 메서드의 예시 코드입니다.","style":[]},{"comp":"aceEditor","order":"5","enter":"3","height":"260","start":"","text":"class User {\n    constructor(name) {\n        this.name = 'harry';\n    }\n    \n    static say(age){\n        return `I am ${this.name}, ${age} years old.`;\n    }\n}","style":[]},{"comp":"text","order":"6","enter":"0","text":"(6~8라인) User 클래스 내부에 static 키워드를 사용해 say 정적 메서드를 선언했습니다. ","style":[{"target":"(6~8라인)","type":"font-size:small;"},{"target":"static","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"check","order":"7","enter":"2","id":"7e6c937c","text":"정적 메서드는 클래스 함수 자체에 정의되었으므로,<br> 클래스의 인스턴스가 아닌 클래스 이름으로 호출합니다.","style":[{"target":"클래스 이름으로 호출","type":"background:#F2E0FF;padding:2px;"}]},{"comp":"direction","order":"8","enter":"0","codeId":"12836d6a","targetLine":"10","title":"정적 메서드","text":"다음의 코드를 따라서 입력하고 실행해 보세요.","bgCode":"class User {\n    constructor(name) {\n        this.name = 'harry';\n    }\n    \n    static say(age){\n        return `I am ${this.name}, ${age} years old.`;\n    }\n}\n","style":[]},{"comp":"aceEditor","order":"9","enter":"12","height":"80","start":"10","text":"let who = new User();\nprint(who.say(34));","style":[]},{"comp":"check","order":"10","enter":"2","id":"19c476fc","text":"코드를 실행하면,<br>정적 메서드로 선언된 say의 인스턴스를 생성해 호출하였으므로 다음과 같이 오류가 발생합니다.","style":[]},{"comp":"par","order":"11","enter":"4","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> <font color=red>[ERROR] who.say is not a function</font>"},{"comp":"direction","order":"12","enter":"0","codeId":"6e596eaf","targetLine":"11","title":"정적 메서드","text":"다음과 같이 코드를 수정하고 다시 실행해 보세요.","bgCode":"class User {\n    constructor(name) {\n        this.name = 'harry';\n    }\n    \n    static say(age){\n        return `I am ${this.name}, ${age} years old.`;\n    }\n}\nlet who = new User();\nprint(who.say(34));","style":[]},{"comp":"aceEditor","order":"13","enter":"12","height":"50","start":"11","text":"print(User.say(34));","style":[]},{"comp":"check","order":"14","enter":"2","id":"91cd6b03","text":"이번에는 클래스 이름 User을 사용해 호출하였으므로, 정상적으로 동작하여 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"15","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> I am User, 34 years old."},{"comp":"text","order":"16","enter":"0","text":"say 메서드에서 반환하는 텍스트 문자열에 this.name 을 사용하고 있습니다.","style":[{"target":"this.name","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"aceEditor","order":"17","enter":"3","height":"50","start":"7","text":"        return `I am ${this.name}, ${age} years old.`;","style":[]},{"comp":"text","order":"18","enter":"0","text":"그리고 User 클래스의 this.name은 'harry'입니다.","style":[]},{"comp":"aceEditor","order":"19","enter":"3","height":"105","start":"2","text":"    constructor(name) {\n        this.name = 'harry';\n    }","style":[]},{"comp":"check","order":"20","enter":"3","id":"015ea44d","text":"그런데, say 메서드 호출 결과에서는 'harry'가 아닌 'User'로 출력되었습니다.","style":[]},{"comp":"check","order":"21","enter":"2","id":"1a24bd24","text":"클래스의 this는 인스턴스를 가리킵니다. 따라서 정적 메서드에서는 this를 사용할 수 없습니다.","style":[{"target":"정적 메서드에서는 this를 사용할 수 없습니다","type":"box-shadow: inset 0 -10px 0 #FFF09E;"}]},{"comp":"text","order":"22","enter":"0","text":"정적 메서드에서의 this는 클래스의 인스턴스가 아닌, User 클래스 함수 자체를 가리킵니다.","style":[]},{"comp":"text","order":"23","enter":"6","text":"따라서, say 정적 메서드에서 사용된 this.name으로 User 클래스 함수의 이름인 'User'를 출력하게 되는 것입니다.","style":[]}]}},{"ccab7179":{"title":"클래스 상속","id":"ccab7179","time":1678345321714,"content":[{"comp":"title","order":"1","enter":"2","text":"클래스 상속","style":[]},{"comp":"check","order":"2","enter":"0","id":"3d8162c1","text":"클래스 상속은 코드를 재사용할 수 있으며, 다른 클래스로의 확장을 가능하게 합니다.","style":[]},{"comp":"text","order":"3","enter":"3","text":"클래스 상속 관련 키워드에 대해서 알아보겠습니다.","style":[]},{"comp":"text","order":"4","enter":"2","text":"(1) extends","style":[{"target":"(1) extends","type":"font-size:x-large;"}]},{"comp":"check","order":"5","enter":"2","id":"2952ebfd","text":"이는 부모 클래스를 상속받는 자식 클래스에 사용하는 키워드 입니다.","style":[{"target":"부모 클래스를 상속받는 자식 클래스에 사용","type":"box-shadow: inset 0 -6px 0 #BCB2FF;"}]},{"comp":"text","order":"6","enter":"0","text":"다음과 같은 클래스가 있을 때, 자식 클래스로 상속하는 과정을 살펴보겠습니다.","style":[]},{"comp":"aceEditor","order":"7","enter":"2","height":"230","start":"","text":"class Parent { // 부모 클래스\n    constructor() {\n        this.password = 1234;\n    }\n    checked(password) {\n        return this.password == password;\n    }\n}","style":[]},{"comp":"text","order":"8","enter":"2","text":"Parent 클래스는 password 클래스 필드를 가지고 있고, checked 메서드로 전달받은 값이 this.password와 같은지 반환해줍니다.","style":[]},{"comp":"text","order":"9","enter":"0","text":"다음은 Parent 클래스를 상속받은 Child 클래스의 코드입니다.","style":[]},{"comp":"aceEditor","order":"10","enter":"2","height":"180","start":"9","text":"// 자식 클래스\nclass Child extends Parent {\n    init() {\n        print('correct');\n    }\n}","style":[]},{"comp":"check","order":"11","enter":"0","id":"cb5f23c8","text":"자식 클래스인 Child에 extends 키워드가 사용되었습니다.","style":[{"target":"extends","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"text","order":"12","enter":"3","text":"Child 클래스에는 init 메서드가 선언되었습니다.","style":[]},{"comp":"direction","order":"13","enter":"0","codeId":"9f03b6f1","targetLine":"16","title":"extends","text":"다음의 코드를 추가하고 실행해 보세요.","bgCode":"class Parent { // 부모 클래스\n    constructor() {\n        this.password = 1234;\n    }\n    checked(password) {\n        return this.password == password;\n    }\n}\n// 자식 클래스\nclass Child extends Parent {\n    init() {\n        print('correct');\n    }\n}\n\n","style":[]},{"comp":"aceEditor","order":"14","enter":"12","height":"105","start":"16","text":"let child = new Child();\nchild.init();\nprint(child.checked(1234));","style":[]},{"comp":"text","order":"15","enter":"0","text":"Child 클래스의 인스턴스를 생성해 child 변수에 대입합니다.","style":[]},{"comp":"aceEditor","order":"16","enter":"3","height":"50","start":"16","text":"let child = new Child();","style":[]},{"comp":"text","order":"17","enter":"0","text":"child 인스턴스의 init 메서드를 호출합니다.","style":[]},{"comp":"aceEditor","order":"18","enter":"3","height":"50","start":"17","text":"child.init();","style":[]},{"comp":"text","order":"19","enter":"0","text":"그리고 부모 클래스에 포함된 checked 메서드를 호출해 반환값을 출력합니다.","style":[]},{"comp":"aceEditor","order":"20","enter":"3","height":"50","start":"18","text":"print(child.checked(1234));","style":[]},{"comp":"check","order":"21","enter":"2","id":"95c47df8","text":"코드를 실행하면 init 메서드와 부모 클래스의 checked 메서드가 호출되어 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"22","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> correct  <font size=2 color=gray>// init 메서드 호출 결과 </font>\n>> true  &nbsp;&nbsp;&nbsp;<font size=2 color=gray>// checked 메서드 호출 결과 </font>"},{"comp":"text","order":"23","enter":"4","text":"이와 같이 Child 클래스는 Parent 클래스를 상속받았기 때문에 부모 클래스의 메서드를 호출할 수 있습니다.","style":[]},{"comp":"text","order":"24","enter":"2","text":"(2) super","style":[{"target":"(2) super","type":"font-size:x-large;"}]},{"comp":"check","order":"25","enter":"3","id":"0d6c66dc","text":"이는 부모 클래스를 참조하거나 부모 클래스의 constructor를 호출할 때 사용합니다.","style":[{"target":"부모 클래스를 참조","type":"background:#E0FFFA;padding:2px;"},{"target":"부모 클래스의 constructor를 호출","type":"background:#FFF2E5;padding:2px;"}]},{"comp":"text","order":"26","enter":"0","text":"다음은 자식 클래스에 constructor 메서드로 클래스 필드 id를 선언한 코드입니다.","style":[]},{"comp":"aceEditor","order":"27","enter":"3","height":"340","start":"9","text":"// 자식 클래스\nclass Child extends Parent {\n    constructor(id, password) {\n        this.id = id;\n    }\n    init() {\n        print('correct');\n    }\n}\n\nlet child = new Child('userId');\nprint(child.id, child.password);","style":[]},{"comp":"direction","order":"28","enter":"14","codeId":"60dee1ff","targetLine":"12","title":"super","text":"에디터를 열고 코드를 실행해 보세요.","bgCode":"class Parent { // 부모 클래스\n    constructor() {\n        this.password = 1234;\n    }\n    checked(password) {\n        return this.password == password;\n    }\n}\n// 자식 클래스\nclass Child extends Parent {\n    constructor(id, password) {\n        this.id = id;\n    }\n    init() {\n        print('correct');\n    }\n}\n\nlet child = new Child('userId');\nprint(child.id, child.password);","style":[]},{"comp":"text","order":"29","enter":"2","text":"코드를 실행하면 다음과 같이 오류가 발생합니다.","style":[]},{"comp":"par","order":"30","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:14px;border-radius:5px;color: #0051DD;","text":">> <font color=red>[ERROR] Must call super constructor in derived class before accessing 'this' or returning from derived constructor</font>"},{"comp":"check","order":"31","enter":"2","id":"8346995b","text":"super 메서드를 사용해 부모 클래스의 constructor를 호출해야 합니다.","style":[{"target":"super 메서드","type":"font-family:sans-serif;font-size:18px;background:#FF740A;color:white;padding:2px;"},{"target":"부모 클래스의 constructor를 호출","type":"box-shadow: inset 0 -6px 0 #FFC184;"}]},{"comp":"direction","order":"32","enter":"0","codeId":"d6c8cab2","targetLine":"12","title":"super","text":"다음의 코드를 추가하고 실행해 보세요.","bgCode":"class Parent { // 부모 클래스\n    constructor() {\n        this.password = 1234;\n    }\n    checked(password) {\n        return this.password == password;\n    }\n}\n// 자식 클래스\nclass Child extends Parent {\n    constructor(id, password) {\n        \n        this.id = id;\n    }\n    init() {\n        print('correct');\n    }\n}\n\nlet child = new Child('userId');\nprint(child.id);","style":[]},{"comp":"aceEditor","order":"33","enter":"12","height":"50","start":"12","text":"        super();","style":[]},{"comp":"text","order":"34","enter":"2","text":"코드를 실행하면 정상적으로 다음과 같이 id와 password 필드값이 출력되는 것을 확인할 수 있습니다.","style":[]},{"comp":"par","order":"35","enter":"4","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> userId 1234"},{"comp":"text","order":"36","enter":"0","text":"이번에는 자식 클래스의 init 메서드에서 부모 클래스의 메서드를 사용해 보겠습니다.","style":[]},{"comp":"aceEditor","order":"37","enter":"2","height":"130","start":"15","text":"    init(password) {\n        if(checked(password)) print('correct');\n        else print('incorrect');\n    }","style":[]},{"comp":"check","order":"38","enter":"0","id":"fb6f06d0","text":"16라인에서 부모 클래스의 메서드인 checked가 사용되었습니다. ","style":[]},{"comp":"direction","order":"39","enter":"15","codeId":"7998c5e8","targetLine":"","title":"super","text":"에디터를 열고 코드를 실행해 보세요.","bgCode":"class Parent { // 부모 클래스\n    constructor() {\n        this.password = 1234;\n    }\n    checked(password) {\n        return this.password == password;\n    }\n}\n// 자식 클래스\nclass Child extends Parent {\n    constructor(id, password) {\n        super();\n        this.id = id;\n    }\n    init(password) {\n        if(checked(password)) print('correct');\n        else print('incorrect');\n    }\n}\n\nlet child = new Child('userId');\nchild.init(7890);","style":[]},{"comp":"text","order":"40","enter":"2","text":"코드를 실행하면 다음과 같이 오류가 발생합니다.","style":[]},{"comp":"par","order":"41","enter":"3","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> <font color=red>[ERROR] checked is not defined</font>"},{"comp":"check","order":"42","enter":"2","id":"c80d2342","text":"자식 클래스에서 부모 클래스를 참조하려면 super 키워드를 사용해야 합니다. ","style":[{"target":"super","type":"padding: 3px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:15px;border-radius:5px;color: #406784;"}]},{"comp":"direction","order":"43","enter":"0","codeId":"345060c8","targetLine":"16","title":"super","text":"다음과 같이 코드를 수정하고 실행해 보세요.","bgCode":"class Parent { // 부모 클래스\n    constructor() {\n        this.password = 1234;\n    }\n    checked(password) {\n        return this.password == password;\n    }\n}\n// 자식 클래스\nclass Child extends Parent {\n    constructor(id, password) {\n        super();\n        this.id = id;\n    }\n    init(password) {\n        if(checked(password)) print('correct');\n        else print('incorrect');\n    }\n}\n\nlet child = new Child('userId');\nchild.init(7890);","style":[]},{"comp":"aceEditor","order":"44","enter":"12","height":"50","start":"16","text":"        if(super.checked(password)) print('correct');","style":[]},{"comp":"check","order":"45","enter":"2","id":"5a82902e","text":"코드를 실행하면 부모 클래스 checked 메서드가 정상 동작해 다음과 같이 출력됩니다.","style":[]},{"comp":"par","order":"46","enter":"6","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> incorrect"},{"comp":"text","order":"47","enter":"0","text":"클래스 상속 시, 부모 클래스의 메소드를 재정의해 사용할 수 있습니다.","style":[{"target":"부모 클래스의 메소드를 재정의","type":"box-shadow: inset 0 -6px 0 #5FC0D8;"}]},{"comp":"check","order":"48","enter":"2","id":"c25e0495","text":"이를 오버라이딩(Overriding)이라고 합니다.","style":[{"target":"오버라이딩(Overriding)","type":"font-family:sans-serif;font-size:18px;background:#00C2C9;color:white;padding:2px;"}]},{"comp":"text","order":"49","enter":"0","text":"다음의 코드로 살펴보겠습니다.","style":[]},{"comp":"aceEditor","order":"50","enter":"2","height":"620","start":"","text":"class Parent { // 부모 클래스\n    constructor() {\n        this.password = 'ABCD';\n    }\n    checked(password) {\n        return this.password == password;\n    }\n}\n// 자식 클래스\nclass Child extends Parent {\n    constructor(id, password) {\n        super();\n        this.id = id;\n    }\n    \n    checked(password) {\n        password = password.toUpperCase();\n        return super.checked(password);\n    }\n}\n\nlet child = new Child('userId');\nprint(child.checked('abcd'));","style":[]},{"comp":"text","order":"51","enter":"0","text":"(16~19라인) 부모 클래스의 checked 메서드와 동일한 이름으로 자식 클래스에서 재정의 되었습니다.","style":[{"target":"(16~19라인)","type":"font-size:small;"}]},{"comp":"text","order":"52","enter":"2","text":"따라서, (23라인) 'abce'문자열로 checked 메서드가 호출된 결과를 출력하면,","style":[{"target":"(23라인)","type":"font-size:small;"}]},{"comp":"check","order":"53","enter":"2","id":"da1a2f1f","text":"'abcd'가 대문자로 변환되어 부모 클래스 password 필드 값과 일치하다고 판단돼 다음과 같은 결과를 얻을 수 있습니다.","style":[]},{"comp":"par","order":"54","enter":"6","style":"margin:0 auto;padding: 5px;background: #E6E6EF;font-family:IBM Plex Mono;font-size:17px;border-radius:5px;color: #0051DD;","text":">> true"},{"comp":"quiz","order":"55","enter":"4","style":[],"quiz":[{"type":"multiple","id":"bf57ddcf","answer":"1","question":"다음 중 클래스에서 정적 메서드를 정의하는 방법은 무엇인가요?","example":["static 키워드로 정의","클래스 내부에 메서드 추가","prototype 객체에 메서드 추가","function 키워드로 정의"]},{"type":"multiple","id":"46d884a3","answer":"3","question":"다음 중 클래스에서 상속받은 메서드를 호출할 때 사용하는 키워드는 무엇인가요?","example":["constructor","this","super","extends"]}]},{"comp":"completeBtn","order":"56","enter":"4","id":"3194ebbe","style":[]},{"comp":"ending","order":"57","enter":"4","style":[]}]}}],
    "icon": "undraw_code_review_re_woeb.svg"
}